name: LicenseCheck

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master


jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Install Python (ScanCode benötigt Python)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # 3. Install ScanCode Toolkit
      - name: Install ScanCode Toolkit
        run: |
          curl -L https://github.com/nexB/scancode-toolkit/releases/download/v31.0.0/scancode-toolkit-31.0.0.zip -o scancode-toolkit.zip
          unzip scancode-toolkit.zip -d scancode-toolkit
          chmod +x scancode-toolkit/scancode

      # 4. Finde alle `.g4`-Dateien
      - name: Find .g4 Files
        id: find_g4_files
        run: |
          files=$(find . -type f -name "*.g4")
          if [ -z "$files" ]; then
            echo "No .g4 files found."
            exit 1
          fi
          echo "files=$files" >> $GITHUB_ENV

      # 5. Lizenzscan mit ScanCode Toolkit
      - name: Run License Scan
        id: license_scan
        run: |
          mkdir -p scancode-results
          for file in $files; do
            ./scancode-toolkit/scancode "$file" --json-pp "scancode-results/$(basename "$file").json"
          done

      # 6. Prüfe Scan-Ergebnisse
      - name: Check Scan Results
        run: |
          incompatible_found=false
          header_missing=false
          wrong_header=false
          
          # Erwarte den vollständigen Lizenzheader hier (ersetzen durch deinen Header)
          expected_license_header=$(cat <<EOF
          YOUR_LICENSE_HEADER_HERE
          EOF
          )
          
          for result in scancode-results/*.json; do
            echo "Checking $result..."
          
            # Überprüfe auf inkompatible Lizenzen
            incompatible=$(jq '.files[].licenses[] | select(.key | test("^(?!gpl-3.0).*"))' "$result")
            if [ -n "$incompatible" ]; then
              echo "Incompatible license found in $result"
              incompatible_found=true
            fi
          
            # Prüfe, ob der Lizenzheader fehlt
            license_headers=$(jq '.files[].license_expressions' "$result")
            if [ -z "$license_headers" ]; then
              echo "No license header found in $result"
              header_missing=true
            fi
          
            # Prüfe, ob der Lizenzheader korrekt ist
            file_content=$(cat "$(jq -r '.files[].path' "$result")")
            if [[ "$file_content" != *"$expected_license_header"* ]]; then
              echo "License header mismatch in $result"
              wrong_header=true
            fi
          done
          
          # Abbruch bei Fehlern
          if [ "$incompatible_found" = true ] || [ "$header_missing" = true ] || [ "$wrong_header" = true ]; then
            echo "License check failed."
            exit 1
          fi
          
          echo "All files passed the license check."
