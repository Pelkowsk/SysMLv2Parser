name: AllInOne CICD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:

  build-and-grammartest:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Download ANTLR
        run: |
          curl -o antlr-4.13.0-complete.jar https://www.antlr.org/download/antlr-4.13.0-complete.jar

      - name: Search and Generate Lexer and Parser for all .g4 files
        run: |
          echo "Searching for .g4 files in the entire project..."
          files=$(find . -type f -name "*.g4")
          if [ -z "$files" ]; then
            echo "No .g4 files found. Exiting..."
            exit 1
          fi
          echo "Found .g4 files:"
          for file in $files; do
            echo "Processing $file..."
            java -jar antlr-4.13.0-complete.jar -Dlanguage=Java -visitor -listener -package com.example.grammar "$file"
          done

      - name: Build Application (Gradle)
        run: ./gradlew build --no-daemon

      - name: Test Application (Gradle)
        run: ./gradlew test --no-daemon

      - name: Set Timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date +'%d.%m.%Y-%H-%M-%S')" >> $GITHUB_ENV

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ env.TIMESTAMP }}
          path: build/reports/tests/test

  license-and-header-check:
    name: License and Header Check
    runs-on: ubuntu-latest
    needs: build-and-grammartest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install ScanCode Toolkit
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip
          pip3 install scancode-toolkit

      - name: Find all .g4 files
        id: find_g4_files
        run: |
          # Suche nach allen .g4-Dateien und speichere die Pfade in g4_files.txt
          find $GITHUB_WORKSPACE -name "*.g4" > g4_files.txt
          # ZÃ¤hle die Anzahl der gefundenen Dateien
          file_count=$(wc -l < g4_files.txt)
          echo "Anzahl der gefundenen .g4-Dateien: $file_count"
          # Setze den Output-Wert 'files_found' entsprechend
          if [ "$file_count" -gt 0 ]; then
            echo "files_found=true" >> "$GITHUB_OUTPUT"
          else
            echo "files_found=false" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Create temporary directory for .g4 files
        run: mkdir -p $GITHUB_WORKSPACE/temp_g4_files
        shell: bash

      - name: Copy .g4 files to temporary directory
        if: steps.find_g4_files.outputs.files_found == 'true'
        run: |
          while IFS= read -r file; do
            cp "$file" $GITHUB_WORKSPACE/temp_g4_files/
          done < g4_files.txt
        shell: bash

      - name: Set environment variables
        run: |
          echo "SCANCODE_RESULTS_DIR=$GITHUB_WORKSPACE/scancode_results" >> $GITHUB_ENV
          echo "G4_FILES_LIST=$GITHUB_WORKSPACE/g4_files.txt" >> $GITHUB_ENV

      - name: Set Timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date +'%d.%m.%Y-%H-%M-%S')" >> $GITHUB_ENV

      - name: Run ScanCode Toolkit on .g4 files
        if: steps.find_g4_files.outputs.files_found == 'true'
        run: |
          scancode -cl --json-pp "scancode_results.json" $GITHUB_WORKSPACE/temp_g4_files/
        shell: bash

      - name: Upload ScanCode reports
        uses: actions/upload-artifact@v4
        with:
          name: scancode-reports-${{ env.TIMESTAMP }}
          path: scancode_results.json

      - name: Create scancode_results directory
        run: mkdir -p $GITHUB_WORKSPACE/scancode_results

      - name: Move ScanCode report to scancode_results directory
        run: mv $GITHUB_WORKSPACE/scancode_results.json $GITHUB_WORKSPACE/scancode_results/

      - name: Run license and header check script
        run: python3 scripts/license_check.py


      - name: Upload license and header check report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-and-header-check-report-${{ env.TIMESTAMP }}
          path: license_check_report.json

  docker-image-push:
    name: Docker Operations
    runs-on: ubuntu-latest
    needs: license-and-header-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Build Application (Gradle)
        run: ./gradlew build --no-daemon

      - name: Log in to DockerHub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.TOKEN_DOCKER_TESTMITGRADLE2 }}
        run: echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/sysmlv2parser:latest .

      - name: Push Docker Image
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/sysmlv2parser:latest ${{ secrets.DOCKER_USERNAME }}/sysmlv2parser:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/sysmlv2parser:latest

      - name: Verify Docker Image
        run: |
          echo "Image pushed to DockerHub: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/sysmlv2parser:latest"


