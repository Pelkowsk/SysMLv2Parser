  #/*
  #  * Copyright (c) 2023 John Doe
  #  *
  #  * This software is licensed under the MIT License.
  #  * See the LICENSE file provided with this code.
  #  */

name: CI/CDPipeline


on:
  push:
    branches:
      - master
    paths-ignore:
      - sbom.spdx.json
  pull_request:
    branches:
      - production

  workflow_dispatch:


jobs:

  license-and-header-check:
    name: License and Header Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install ScanCode Toolkit
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip
          pip3 install scancode-toolkit

      - name: Find All .g4 And .java Files
        id: find_g4_files
        run: |
          # Searches for all g4.files and java.files and saves them into g4_files.txt
          find $GITHUB_WORKSPACE \( -name "*.g4" -o -name "*.java" \) > g4_files.txt
          # count the number of g4.-files
          file_count=$(wc -l < g4_files.txt)
          echo "number of found .g4-files: $file_count"
          # check if files-count not zero and puts 'files_found' 
          if [ "$file_count" -gt 0 ]; then
            echo "files_found=true" >> "$GITHUB_OUTPUT"
          else
            echo "files_found=false" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Create Temporary Directory For Files
        run: mkdir -p $GITHUB_WORKSPACE/temp_g4_files
        shell: bash

      - name: Copy Files To Temporary Directory
        if: steps.find_g4_files.outputs.files_found == 'true'
        run: |
          while IFS= read -r file; do
            cp "$file" $GITHUB_WORKSPACE/temp_g4_files/
          done < g4_files.txt
        shell: bash


      - name: Set Timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date +'%d.%m.%Y-%H-%M-%S')" >> $GITHUB_ENV

      - name: Run ScanCode Toolkit On Files
        if: steps.find_g4_files.outputs.files_found == 'true'
        run: |
          scancode -l --json-pp "scancode_results.json" $GITHUB_WORKSPACE/temp_g4_files/
        shell: bash

      - name: Upload ScanCode Toolkit Reports
        uses: actions/upload-artifact@v4
        with:
          name: scancode-report-${{ env.TIMESTAMP }}
          path: scancode_results.json


      - name: Set Environment Variables
        run: |
          echo "SCANCODE_RESULTS_DIR=$GITHUB_WORKSPACE/scancode_results" >> $GITHUB_ENV
          echo "G4_FILES_LIST=$GITHUB_WORKSPACE/g4_files.txt" >> $GITHUB_ENV


      - name: Create ScanCode_Results Directory
        run: mkdir -p $GITHUB_WORKSPACE/scancode_results


      - name: Move ScanCode Report to ScanCode_Results Directory
        run: mv $GITHUB_WORKSPACE/scancode_results.json $GITHUB_WORKSPACE/scancode_results/


      - name: Create Directory for License Report
        run: mkdir -p $GITHUB_WORKSPACE/license_reports


      - name: Run License and Header Check Script
        run: python3 scripts/license_check.py


      - name: Upload License and Header Check Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-and-header-check-report-${{ env.TIMESTAMP }}
          path: $GITHUB_WORKSPACE/license_reports/license_and_header_check_report.json


  build-and-grammartest:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: license-and-header-check
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
        # licensed by MIT LICENSE

      - name: Download ANTLR
        run: |
          curl -o antlr-4.13.0-complete.jar https://www.antlr.org/download/antlr-4.13.0-complete.jar

      - name: Search And Generate Lexer And Parser For All .g4 Files
        run: |
          echo "Searching for .g4 files in the entire project..."
          files=$(find . -type f -name "*.g4")
          if [ -z "$files" ]; then
            echo "No .g4 files found. Exiting..."
            exit 1
          fi
          echo "Found .g4 files:"
          for file in $files; do
            echo "Processing $file..."
            java -jar antlr-4.13.0-complete.jar -Dlanguage=Java -visitor -listener -package com.example.grammar "$file"
          done

      - name: Build Application (Gradle)
        run: ./gradlew build --no-daemon

      - name: Test Application (Gradle)
        run: ./gradlew test --no-daemon

      - name: Set Timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date +'%d.%m.%Y-%H-%M-%S')" >> $GITHUB_ENV

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: grammartest-report-${{ env.TIMESTAMP }}
          path: build/reports/tests/test



  sbom-generation:
    name: Generate And Push SBOM
    runs-on: ubuntu-latest
    needs:
      - license-and-header-check
      - build-and-grammartest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install ScanCode Toolkit
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip
          pip3 install scancode-toolkit


      - name: Generate SBOM In SPDX Format
        run: |
            # Create output directory for SBOM
            mkdir -p $GITHUB_WORKSPACE/sbom
            # Run ScanCode to generate SBOM in SPDX JSON format, without prohibited licenses
            scancode -clip --ignore "scripts/license_check.py" --ignore "ProjectProhibitedLicenses.txt" --spdx-tv $GITHUB_WORKSPACE/sbom/sbom.spdx.json $GITHUB_WORKSPACE

      - name: Set Timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date +'%d.%m.%Y-%H-%M-%S')" >> $GITHUB_ENV


      - name: Commit And Push SBOM To Repository
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure Git user
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Copy SBOM to repository
          cp $GITHUB_WORKSPACE/sbom/sbom.spdx.json $GITHUB_WORKSPACE/sbom.spdx.json

          # Commit and push changes
          git add sbom.spdx.json
          git commit -m "Add SBOM (SPDX JSON) generated by ScanCode Toolkit${{ env.TIMESTAMP }}"
          git push origin HEAD

      
      




















